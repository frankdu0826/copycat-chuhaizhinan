// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  articles Article[]
  comments Comment[]
  likes    Like[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  articles Article[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles Article[]

  @@map("tags")
}

model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  coverImage  String?
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  publishedAt DateTime?
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // SEO fields
  seoTitle    String?
  seoDesc     String?
  seoKeywords String?

  // Relations
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  comments   Comment[]
  likes      Like[]

  @@map("articles")
}

model Tool {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  content       String?
  logo          String?
  website       String
  affiliateLink String?
  discountCode  String?
  discountAmount String?
  pricing       Json?     // 价格信息JSON
  features      Json?     // 功能特性JSON
  verified      Boolean   @default(false)
  featured      Boolean   @default(false)
  views         Int       @default(0)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  categoryId String
  category   ToolCategory @relation(fields: [categoryId], references: [id])

  @@map("tools")
}

model ToolCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tools Tool[]

  @@map("tool_categories")
}

model ServiceProvider {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String?
  content        String?
  logo           String?
  contactName    String
  contactWechat  String
  contactPhone   String?
  contactEmail   String?
  website        String?
  portfolio      Json?    // 作品案例JSON
  pricing        Json?    // 价格信息JSON
  verified       Boolean  @default(false)
  featured       Boolean  @default(false)
  views          Int      @default(0)
  order          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  serviceTypeId String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@map("service_providers")
}

model ServiceType {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  providers ServiceProvider[]

  @@map("service_types")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@map("likes")
}

enum Role {
  USER
  ADMIN
} 